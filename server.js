 /******************************************************
 * PLEASE DO NOT EDIT THIS FILE
 * the verification process may break
 * ***************************************************/

'use strict';

var fs = require('fs');
var express = require('express');
var app = express();
var MongoClient = require('mongodb').MongoClient;
var _images;

const GoogleImages = require('google-images');
const client = new GoogleImages(process.env.CSE_ID , process.env.GOOGLE_API);
const dbUrl = `mongodb://${process.env.MLAB_USER}:${process.env.MLAB_PASSWORD}@${process.env.MLAB_DOMAIN}/${process.env.MLAB_DB}`;


if (!process.env.DISABLE_XORIGIN) {
  app.use(function(req, res, next) {
    var allowedOrigins = ['https://narrow-plane.gomix.me', 'https://www.freecodecamp.com'];
    var origin = req.headers.origin || '*';
    if(!process.env.XORIG_RESTRICT || allowedOrigins.indexOf(origin) > -1){
         console.log(origin);
         res.setHeader('Access-Control-Allow-Origin', origin);
         res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
    }
    next();
  });
}

app.use('/public', express.static(process.cwd() + '/public'));

app.route('/_api/package.json')
  .get(function(req, res, next) {
    console.log('requested');
    fs.readFile(__dirname + '/package.json', function(err, data) {
      if(err) return next(err);
      res.type('txt').send(data.toString());
    });
  });
  
app.route('/')
    .get(function(req, res) {
		  res.sendFile(process.cwd() + '/views/index.html');
    })

app.route('/api/imagesearch/:givenTerm(*)')
    .get(function(req, res) {
        //search the term with google-image search
        client.search(req.params.givenTerm)
	      .then(images => {
          //parse the results in the format we want
         _images = adjustArray(images, req.query.offset);
          //save the searchterm with a date in mongo
         saveThatSearch(req.params.givenTerm);
        //respond with the results
         res.send(JSON.stringify(_images),null,4);
		});
})

app.route('/api/latest/imagesearch')
    .get(function(req, res) {
           MongoClient.connect(dbUrl, function(err, db){
          if(err){ return console.dir(err); }
          var collection = db.collection('imagesearch');
             
          collection.find({},{'_id':false,'collection':false}).toArray(function(err, imagesearch){
            //parse off the collection at some point
            res.status(200).json({'collection':imagesearch});
          })
      })      
  })

// Respond not found to all the wrong routes
app.use(function(req, res, next){
  res.status(404);
  res.type('txt').send('Not found');
});

// Error Middleware
app.use(function(err, req, res, next) {
  if(err) {
    res.status(err.status || 500)
      .type('txt')
      .send(err.message || 'SERVER ERROR');
  }  
})

app.listen(process.env.PORT, function () {
  console.log('Node.js listening ...');
});

function adjustArray(array, amount){
  var new_array = []
  for(var index=0; index < array.length; ++index){
    
         var sub_object = array[index];
         var new_object = {url:sub_object["url"], snippet:sub_object["description"], thumbnail:sub_object["thumbnail"]["url"], context:sub_object["parentPage"]}; 
         new_array.push(new_object);
    
         if(new_array.length >= amount-1){
           return new_array;
           
         }
   }
  
  return new_array;
;}
  
function saveThatSearch(searchTerm){
  
  MongoClient.connect(dbUrl, function(err, db){
          if(err){ return console.dir(err); }
          var collection = db.collection('imagesearch');      
          collection.insert({"Term":searchTerm,
                             "when":new Date().toISOString().replace(/T/, ' ').replace(/\..+/, '')});            
        })
};
  
